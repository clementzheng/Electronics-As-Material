int gridSize = 30;
int w = 60;
int h = 40;

int minSpeedInterval = 50; // LOWER = FASTER
int maxSpeedInterval = 1000; // HIGHER = SLOWER

Snake snake;

void setup() {
  surface.setSize(gridSize*w, gridSize*h);
  resetGame();
}

void draw() {
  fill(255);
  noStroke();
  rect(0, 0, width, height);
}

void resetGame() {
  snake = new Snake(10, float(round(w/2)), float(round(h/2)), (minSpeedInterval+maxSpeedInterval)/2);
}

class Snake {

  int size;
  int dir = 1;
  PVector[] body;
  int speedInterval;
  int timestamp = 0;

  boolean moving = false;

  Snake(int _size, float x, float y, int _speedInterval) {
    size = _size;
    speedInterval = _speedInterval;
    body = new PVector[size];

    float posX = x;
    float posY = y;

    for (int i=0; i<size; i++) {
      body[i] = new PVector(posX - i, posY);
    }
  }

  void update() {
    if (moving) {
      if (millis() - timestamp > speedInterval) {
        timestamp = millis();

        for (int i=size; i>0; i--) {
          body[i] = new PVector(body[i-1].x, body[i-1].y);
        }

        switch(dir) {
        case 1:
          body[0] = new PVector(body[0].x+1, body[0].y);
          break;
        case 2:
          body[0] = new PVector(body[0].x, body[0].y+1);
          break;
        case 3:
          body[0] = new PVector(body[0].x-1, body[0].y);
          break;
        case 4:
          body[0] = new PVector(body[0].x, body[0].y-1);
          break;
        }
      }
    }
    
    for (int i=0; i<size; i++) {
      fill(0);
      noStroke();
      rect(body[i].x*gridSize, body[i].y*gridSize, gridSize, gridSize);
    }
  }
}
